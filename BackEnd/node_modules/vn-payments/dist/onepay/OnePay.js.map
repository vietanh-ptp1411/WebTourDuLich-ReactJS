{"version":3,"sources":["../../src/onepay/OnePay.js"],"names":["OnePay","constructor","config","type","configSchema","validate","buildCheckoutUrl","payload","Promise","resolve","reject","data","Object","assign","checkoutPayloadDefaults","vpcMerchant","merchant","vpcAccessCode","accessCode","validateCheckoutPayload","error","message","amount","Math","floor","arrParam","AVS_City","billingCity","AVS_Country","billingCountry","AVS_PostCode","billingPostCode","AVS_StateProv","billingStateProvince","AVS_Street01","billingStreet","AgainLink","againLink","Title","title","vpc_AccessCode","vpc_Amount","String","vpc_Command","vpcCommand","vpc_Currency","currency","vpc_Customer_Email","customerEmail","vpc_Customer_Id","customerId","vpc_Customer_Phone","customerPhone","vpc_Locale","locale","vpc_MerchTxnRef","transactionId","vpc_Merchant","vpc_OrderInfo","orderId","vpc_ReturnURL","returnUrl","vpc_SHIP_City","deliveryCity","vpc_SHIP_Country","deliveryCountry","vpc_SHIP_Provice","deliveryProvince","vpc_SHIP_Street01","deliveryAddress","vpc_TicketNo","clientIp","vpc_Version","vpcVersion","redirectUrl","URL","paymentGateway","secureCode","keys","forEach","key","value","length","searchParams","append","substr","push","join","secureSecret","Error","verifyReturnUrl","query","vpcTxnSecureHash","vpc_SecureHash","vpc_TxnResponseCode","sort","isSuccess","SimpleSchema","regEx","RegEx","Url","VERSION","COMMAND","CURRENCY_VND","LOCALE_EN","LOCALE_VN"],"mappings":"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","file":"OnePay.js","sourcesContent":["/* © 2018 NauStud.io\n * @author Jacob Pham, Thanh Tran\n */\nimport { URL } from 'url';\nimport SimpleSchema from 'simpl-schema';\nimport { toUpperCase, pack, hashHmac } from '../utils';\n\n/**\n * This is the base class for OnePay's domestic and intl payment gateways\n * which bear the common hashing algorithym.\n * <br>\n * It should not be used alone.\n * <br>\n * _Đây là lớp cơ sở cho lớp OnePayDomestic và lớp OnePayInternational.\n * Lớp này chứa các thuật toán mã hóa chung._\n * <br>\n * _Lớp này không nên được sử dụng để khai báo._\n * @private\n */\nclass OnePay {\n\t/**\n\t * Instantiate a OnePay checkout helper\n\t * <br>\n\t * _Khởi tạo class thanh toán OnePay_\n\t *\n\t * @param  {Object} config check OnePay.configSchema for data type requirements. <br> _Xem OnePay.configSchema để biết yêu cầu kiểu dữ liệu._\n\t * @return {void}\n\t */\n\tconstructor(config = {}, type = 'domestic') {\n\t\tthis.config = config;\n\t\tthis.type = type; // 'domestic' or 'international'\n\t\t// check config validity and throw errors if any\n\t\tOnePay.configSchema.validate(this.config);\n\t}\n\n\t/**\n\t * Build checkout URL to redirect to the payment gateway.\n\t * <br>\n\t * _Hàm xây dựng url để redirect qua OnePay gateway, trong đó có tham số mã hóa (còn gọi là public key)._\n\t *\n\t * @param  {OnePayCheckoutPayload} payload Object that contains needed data for the URL builder, refer to typeCheck object above. <br> _Đối tượng chứa các dữ liệu cần thiết để thiết lập đường dẫn._\n\t * @return {Promise<URL>} buildCheckoutUrl promise\n\t */\n\tbuildCheckoutUrl(payload) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// Mảng các tham số chuyển tới Onepay Payment\n\t\t\tconst data = Object.assign({}, this.checkoutPayloadDefaults, payload);\n\t\t\tconst config = this.config;\n\n\t\t\tdata.vpcMerchant = config.merchant;\n\t\t\tdata.vpcAccessCode = config.accessCode;\n\n\t\t\t// Input type checking, define the schema and use it in subclass\n\t\t\ttry {\n\t\t\t\tthis.validateCheckoutPayload(data);\n\t\t\t} catch (error) {\n\t\t\t\treject(error.message);\n\t\t\t}\n\n\t\t\t// convert amount to OnePay format (100 = 1VND):\n\t\t\tdata.amount = Math.floor(data.amount * 100);\n\n\t\t\t// IMPORTANT: the keys' order must be exactly like below\n\t\t\t// Note: we can also sort the keys alphabetically like in PHP, but by listing the keys\n\t\t\t// in fixed order, we don't worry about missmatch checksum hashing\n\t\t\t/* prettier-ignore */\n\t\t\tconst arrParam = {\n\t\t\t\tAVS_City: data.billingCity,\n\t\t\t\tAVS_Country: data.billingCountry,\n\t\t\t\tAVS_PostCode: data.billingPostCode,\n\t\t\t\tAVS_StateProv: data.billingStateProvince,\n\t\t\t\tAVS_Street01: data.billingStreet,\n\t\t\t\tAgainLink: data.againLink,\n\t\t\t\tTitle: data.title,\n\t\t\t\tvpc_AccessCode: data.vpcAccessCode,\n\t\t\t\tvpc_Amount: String(data.amount),\n\t\t\t\tvpc_Command: data.vpcCommand,\n\t\t\t\tvpc_Currency: data.currency,\n\t\t\t\tvpc_Customer_Email: data.customerEmail,\n\t\t\t\tvpc_Customer_Id: data.customerId,\n\t\t\t\tvpc_Customer_Phone: data.customerPhone,\n\t\t\t\tvpc_Locale: data.locale,\n\t\t\t\tvpc_MerchTxnRef: data.transactionId,\n\t\t\t\tvpc_Merchant: data.vpcMerchant,\n\t\t\t\tvpc_OrderInfo: data.orderId,\n\t\t\t\tvpc_ReturnURL: data.returnUrl,\n\t\t\t\tvpc_SHIP_City: data.deliveryCity,\n\t\t\t\tvpc_SHIP_Country: data.deliveryCountry,\n\t\t\t\tvpc_SHIP_Provice: data.deliveryProvince, // NOTE: vpc_SHIP_Provice is exact in the sepcs document\n\t\t\t\tvpc_SHIP_Street01: data.deliveryAddress,\n\t\t\t\tvpc_TicketNo: data.clientIp,\n\t\t\t\tvpc_Version: data.vpcVersion,\n\t\t\t};\n\n\t\t\tif (this.type === 'international') {\n\t\t\t\t// special case: Intl gateway don't checksum **vps_Currency**, so we have to delete it from params :(\n\t\t\t\tdelete arrParam.vpc_Currency;\n\t\t\t}\n\n\t\t\t// Step 2. Create the target redirect URL at OnePay server\n\t\t\tconst redirectUrl = new URL(config.paymentGateway);\n\t\t\tconst secureCode = [];\n\n\t\t\tObject.keys(arrParam).forEach(key => {\n\t\t\t\tconst value = arrParam[key];\n\n\t\t\t\tif (value == null || value.length === 0) {\n\t\t\t\t\t// skip empty params (but they must be optional)\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tredirectUrl.searchParams.append(key, value); // no need to encode URI with URLSearchParams object\n\n\t\t\t\tif (value.length > 0 && (key.substr(0, 4) === 'vpc_' || key.substr(0, 5) === 'user_')) {\n\t\t\t\t\t// secureCode is digested from vpc_* params but they should not be URI encoded\n\t\t\t\t\tsecureCode.push(`${key}=${value}`);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* Step 3. calculate the param checksum with hash_hmac*/\n\t\t\t// console.log('secureCode:', secureCode.join('&'));\n\t\t\tif (secureCode.length > 0) {\n\t\t\t\tredirectUrl.searchParams.append(\n\t\t\t\t\t'vpc_SecureHash',\n\t\t\t\t\ttoUpperCase(hashHmac('SHA256', secureCode.join('&'), pack(config.secureSecret)))\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// console.log('redirectUrl:', redirectUrl);\n\n\t\t\tresolve(redirectUrl);\n\t\t});\n\t}\n\n\t/**\n\t * Validate checkout payload against specific schema. Throw ValidationErrors if invalid against checkoutSchema\n\t * <br>\n\t * Build the schema in subclass.\n\t * <br>\n\t * _Kiểm tra tính hợp lệ của dữ liệu thanh toán dựa trên schema đã được đồng bộ với tài liệu của nhà cung cấp.\n\t * Hiển thị lỗi nếu không hợp lệ với checkoutSchema._\n\t * <br>\n\t * _Schema sẽ được tạo trong class con._\n\t * @param {OnePayCheckoutPayload} payload\n\t */\n\tvalidateCheckoutPayload(/*payload*/) {\n\t\tthrow new Error('validateCheckoutPayload() requires overloading');\n\t}\n\n\t/**\n\t * Return default checkout Payloads\n\t *\n\t * _Lấy checkout payload mặc định cho cổng thanh toán này_\n\t * @return {OnePayCheckoutPayload} default payloads\n\t */\n\tget checkoutPayloadDefaults() {\n\t\treturn {};\n\t}\n\n\t/**\n\t * Verify return query string from OnePay using enclosed vpc_SecureHash string\n\t *\n\t * _Hàm thực hiện xác minh tính đúng đắn của các tham số trả về từ cổng thanh toán_\n\t *\n\t * @param  {Object} query Query data object from GET handler (`response.query`). <br> _Object query trả về từ GET handler_\n\t * @return {Promise<Object>} Promise object which resolved with normalized returned data object, with additional fields like isSuccess. <br> _Promise khi hoàn thành sẽ trả về object data từ cổng thanh toán, được chuẩn hóa tên theo camelCase và đính kèm thuộc tính isSuccess_\n\t */\n\tverifyReturnUrl(query) {\n\t\treturn new Promise(resolve => {\n\t\t\tconst data = Object.assign({}, query);\n\t\t\tconst config = this.config;\n\t\t\tconst vpcTxnSecureHash = data.vpc_SecureHash;\n\t\t\tdelete data.vpc_SecureHash;\n\n\t\t\tif (\n\t\t\t\tconfig.secureSecret.length > 0 &&\n\t\t\t\tdata.vpc_TxnResponseCode !== '7' &&\n\t\t\t\tdata.vpc_TxnResponseCode !== 'No Value Returned'\n\t\t\t) {\n\t\t\t\tconst secureCode = [];\n\n\t\t\t\tObject.keys(data)\n\t\t\t\t\t.sort() // need to sort the key by alphabetically\n\t\t\t\t\t.forEach(key => {\n\t\t\t\t\t\tconst value = data[key];\n\n\t\t\t\t\t\tif (value.length > 0 && (key.substr(0, 4) === 'vpc_' || key.substr(0, 5) === 'user_')) {\n\t\t\t\t\t\t\tsecureCode.push(`${key}=${value}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\tif (\n\t\t\t\t\ttoUpperCase(vpcTxnSecureHash) ===\n\t\t\t\t\ttoUpperCase(hashHmac('SHA256', secureCode.join('&'), pack(config.secureSecret)))\n\t\t\t\t) {\n\t\t\t\t\t// for the transaction to succeed, its checksum must be valid, then response code must be '0'\n\t\t\t\t\tresolve({ isSuccess: data.vpc_TxnResponseCode === '0' });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// this message prop will override whatever in Subclass\n\t\t\tresolve({ isSuccess: false, message: 'Wrong checksum' });\n\t\t});\n\t}\n}\n\n/**\n * OnePay checkout payload object, with normalized field names and validation rules based on OnePay's dev document\n *\n * _Object chuyển dữ liệu thanh toán cho OnePay, đã được chuẩn hóa tên biến và sẽ được kiểm _\n *\n * @typedef {Object} OnePayCheckoutPayload\n * @property {string} againLink optional: true, max: 64, regEx: urlRegExp\n * @property {number} amount max: 9999999999\n * @property {string} billingCity optional: true, max: 64\n * @property {string} billingCountry optional: true, max: 2\n * @property {string} billingPostCode optional: true, max: 64\n * @property {string} billingStateProvince optional: true, max: 64\n * @property {string} billingStreet optional: true, max: 64\n * @property {string} clientIp max: 15\n * @property {string} currency allowedValues: ['VND']\n * @property {string} customerEmail optional: true, max: 24, regEx: SimpleSchema.RegEx.Email\n * @property {string} customerId optional: true, max: 64\n * @property {string} customerPhone optional: true, max: 16\n * @property {string} deliveryAddress optional: true, max: 64\n * @property {string} deliveryCity optional: true, max: 64\n * @property {string} deliveryCountry optional: true, max: 8\n * @property {string} deliveryProvince optional: true, max: 64\n * @property {string} locale allowedValues: ['vn', 'en']\n * @property {string} orderId max: 32\n * @property {string} returnUrl max: 255, regEx: urlRegExp. <br>NOTE: returnURL is documented with 64 chars limit but seem not a hard limit, and 64 is too few in some scenar\n * @property {string} title optional: true, max: 255. <br>NOTE: no max limit documented for this field, this is just a safe val\n * @property {string} transactionId max: 34\n * @property {string} vpcAccessCode max: 8\n * @property {string} vpcCommand max: 16\n * @property {string} vpcMerchant max: 16\n * @property {string} vpcVersion max: 2\n */\n\n/**\n * OnePay configSchema\n * @type {SimpleSchema}\n */\nOnePay.configSchema = new SimpleSchema({\n\taccessCode: { type: String },\n\tmerchant: { type: String },\n\tpaymentGateway: { type: String, regEx: SimpleSchema.RegEx.Url },\n\tsecureSecret: { type: String },\n});\n// should not be changed\nOnePay.VERSION = '2';\nOnePay.COMMAND = 'pay';\n// onepay only support VND\nOnePay.CURRENCY_VND = 'VND';\nOnePay.LOCALE_EN = 'en';\nOnePay.LOCALE_VN = 'vn';\n\nexport { OnePay };\n"]}