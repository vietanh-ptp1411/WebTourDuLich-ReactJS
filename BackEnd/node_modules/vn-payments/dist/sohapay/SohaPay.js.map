{"version":3,"sources":["../../src/sohapay/SohaPay.js"],"names":["SohaPay","constructor","config","Object","assign","configSchema","validate","buildCheckoutUrl","payload","Promise","resolve","reject","data","checkoutPayloadDefaults","siteCode","merchantCode","paymentType","validateCheckoutPayload","error","message","arrParam","language","order_code","orderId","order_email","customerEmail","order_mobile","customerPhone","payment_type","price","amount","toString","return_url","returnUrl","site_code","transaction_info","transactionInfo","version","redirectUrl","URL","paymentGateway","secureCode","keys","sort","forEach","key","value","length","searchParams","append","push","join","secureSecret","checkoutSchema","LOCALE_VN","VERSION","verifyReturnUrl","query","returnObject","_mapQueryToObject","secureHash","secure_code","verifyResults","isEqual","isSuccess","error_text","errorMessage","responseMessage","responseCode","transactionId","orderEmail","orderSession","order_session","response_code","response_message","SimpleSchema","type","String","max","regEx","RegEx","Email","Integer","locale","optional","currency","billingCity","billingCountry","billingPostCode","billingStateProvince","billingStreet","deliveryAddress","deliveryCity","deliveryCountry","deliveryProvince","clientIp","customerId","LOCALE_EN","TEST_CONFIG"],"mappings":"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","file":"SohaPay.js","sourcesContent":["/* © 2018 NauStud.io\n * @author Tu Nguyen\n */\n\nimport SimpleSchema from 'simpl-schema';\nimport { URL } from 'url';\nimport { toUpperCase, hashHmac, pack } from '../utils';\n\n/**\n * SohaPay payment gateway helper.\n * <br>\n * NOTE: Our test card deprecated, so we couldn't test this gateway thoroughly.\n * <br>\n * _Hàm hỗ trợ thanh toán qua SohaPay_\n *<br>\n * _Lưu ý: Thẻ thanh toán dùng thử của chúng tôi đã hết được hỗ trợ nên chúng tôi không thể kiểm tra hoàn toàn cổng thanh toán này_\n *\n * @example\n * import { SohaPay } from 'vn-payments';\n *\n * const TEST_CONFIG = SohaPay.TEST_CONFIG;\n *\n * const sohapayCheckout = new SohaPay({\n * \tpaymentGateway: TEST_CONFIG.paymentGateway,\n * \tmerchant: TEST_CONFIG.merchant,\n *  receiverEmail: TEST_CONFIG.receiverEmail,\n * \tsecureSecret: TEST_CONFIG.secureSecret,\n * });\n *\n * // checkoutUrl is an URL instance\n * const checkoutUrl = await sohapayCheckout.buildCheckoutUrl(params);\n *\n * this.response.writeHead(301, { Location: checkoutUrl.href });\n * this.response.end();\n */\nclass SohaPay {\n\t/**\n\t * Instantiate a SohaPay checkout helper\n\t * <br>\n\t * _Khởi tạo hàm thanh toán SohaPay_\n\t *\n\t * @param  {Object} config check SohaPay.configSchema for data type requirements <br> _Xem SohaPay.configSchema để biết yêu cầu kiểu dữ liệu_\n\t * @return {void}\n\t */\n\tconstructor(config = {}) {\n\t\tthis.config = Object.assign({}, config);\n\t\tSohaPay.configSchema.validate(this.config);\n\t}\n\n\t/**\n\t * Build checkout URL to redirect to the payment gateway\n\t * <br>\n\t * _Hàm xây dựng url để redirect qua Soha gateway, trong đó có tham số mã hóa (còn gọi là public key)_\n\t * @param  {SohaPayCheckoutPayload} payload Object that contains needed data for the URL builder <br> _Đối tượng chứa các dữ liệu cần thiết để thiết lập đường dẫn._\n\t * @return {Promise<URL>}    The URL object used to redirect <br> _Đối tượng URL dùng để chuyển trang qua cổng thanh toán_\n\t */\n\tbuildCheckoutUrl(payload) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// Mảng các tham số chuyển tới Onepay Payment\n\t\t\tconst data = Object.assign({}, this.checkoutPayloadDefaults, payload);\n\t\t\tconst config = this.config;\n\n\t\t\tdata.siteCode = config.merchantCode;\n\t\t\tdata.paymentType = '';\n\n\t\t\t// Input type checking\n\t\t\ttry {\n\t\t\t\tthis.validateCheckoutPayload(data);\n\t\t\t} catch (error) {\n\t\t\t\treject(error.message);\n\t\t\t}\n\n\t\t\t/* prettier-ignore */\n\t\t\tconst arrParam = {\n\t\t\t\tlanguage\t\t\t: data.language,\n\t\t\t\torder_code\t\t\t: data.orderId,\n\t\t\t\torder_email\t\t\t: data.customerEmail,\n\t\t\t\torder_mobile\t\t: data.customerPhone,\n\t\t\t\tpayment_type\t\t: data.paymentType,\n\t\t\t\tprice\t\t\t\t: data.amount.toString(),\n\t\t\t\treturn_url\t\t\t: data.returnUrl,\n\t\t\t\tsite_code\t\t\t: data.siteCode,\n\t\t\t\ttransaction_info\t: data.transactionInfo,\n\t\t\t\tversion\t\t\t\t: data.version,\n\t\t\t};\n\n\t\t\t// Step 2. Create the target redirect URL at SohaPay server\n\t\t\tconst redirectUrl = new URL(config.paymentGateway);\n\t\t\tconst secureCode = [];\n\n\t\t\tObject.keys(arrParam)\n\t\t\t\t.sort()\n\t\t\t\t.forEach(key => {\n\t\t\t\t\tconst value = arrParam[key];\n\n\t\t\t\t\tif (value == null || value.length === 0) {\n\t\t\t\t\t\t// skip empty params (but they must be optional)\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tredirectUrl.searchParams.append(key, value); // no need to encode URI with URLSearchParams object\n\n\t\t\t\t\tif (value.length > 0) {\n\t\t\t\t\t\t// secureCode is digested from vnp_* params but they should not be URI encoded\n\t\t\t\t\t\tsecureCode.push(`${key}=${value}`);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tif (secureCode.length > 0) {\n\t\t\t\tredirectUrl.searchParams.append(\n\t\t\t\t\t'secure_hash',\n\t\t\t\t\ttoUpperCase(hashHmac('SHA256', secureCode.join('&'), pack(config.secureSecret)))\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tresolve(redirectUrl);\n\t\t});\n\t}\n\n\t/**\n\t * Validate checkout payload against checkoutSchema. Throw ValidationErrors if invalid.\n\t * <br>\n\t * _Kiểm tra tính hợp lệ của dữ liệu thanh toán dựa trên một cấu trúc dữ liệu cụ thể. Hiển thị lỗi nếu không hợp lệ._\n\t * @param {SohaPayCheckoutPayload} payload\n\t */\n\tvalidateCheckoutPayload(payload) {\n\t\tSohaPay.checkoutSchema.validate(payload);\n\t}\n\n\t/**\n\t * Return default checkout Payloads\n\t *\n\t * _Lấy checkout payload mặc định cho cổng thanh toán này_\n\t * @return {SohaPayCheckoutPayload} default payload object <br> _Dữ liệu mặc định của đối tượng_\n\t */\n\tget checkoutPayloadDefaults() {\n\t\t/* prettier-ignore */\n\t\treturn {\n\t\t\tlanguage             : SohaPay.LOCALE_VN,\n\t\t\tversion           \t : SohaPay.VERSION,\n\t\t};\n\t}\n\n\t/**\n\t * @typedef {Object} SohaPayReturnObject\n\t * @property {boolean} isSuccess whether the payment succeeded or not\n\t * @property {string} message returned from SohaPay\n\t * @property {string} transactionId transaction id\n\t * @property {string} orderEmail customer email\n\t * @property {string} orderSession session token came from SohaPay\n\t * @property {string} amount amount paid by customer\n\t * @property {string} siteCode unique code assigned by SohaPay for merchant\n\t * @property {string} responseCode response status code of SohaPay\n\t * @property {string} transactionInfo description of the payment\n\t * @property {string} responseMessage response message from SohaPay\n\t * @property {string} secureCode checksum of the returned data, used to verify data integrity\n\t *\n\t *\n\t * @property {string} error_text e.g: 'Giao dịch thanh toán bị huỷ bỏ'\n\t * @property {string} order_code e.g: 'node-2018-01-19T131933.811Z'\n\t * @property {string} order_email e.g: 'tu.nguyen@naustud.io'\n\t * @property {string} order_session e.g: 'd3bdef93fa01cd37f7e426fa25f5d1a0'\n\t * @property {string} price e.g: '90000'\n\t * @property {string} site_code e.g: 'test'\n\t * @property {string} transaction_info e.g: 'Thanh toan giay adidas'\n\t * @property {string} secure_code e.g: FC5283C6B93C1D8F9A9329293DA38FFC3204FA6CE75661972419DAA6E5A1B7B5\n\t *\n\t */\n\t/**\n\t *\n\t * Verify return query string from SohaPay using enclosed secureCode string\n\t * <br>\n\t * _Hàm thực hiện xác minh tính đúng đắn của các tham số trả về từ SohaPay Payment_\n\t *\n\t * @param  {Object} query Query data object from GET handler (`response.query`)  <br> _Dữ liệu được trả về từ GET handler (`response.query`)_\n\t * @return {Promise<SohaPayReturnObject>} Promise object which resolved with normalized returned data object, with additional fields like isSuccess. <br> _Promise khi hoàn thành sẽ trả về object data từ cổng thanh toán, được chuẩn hóa tên theo camelCase và đính kèm thuộc tính isSuccess_\n\t */\n\tverifyReturnUrl(query) {\n\t\treturn new Promise(resolve => {\n\t\t\tconst returnObject = this._mapQueryToObject(query);\n\n\t\t\tconst data = Object.assign({}, query);\n\t\t\tconst config = this.config;\n\n\t\t\tconst secureHash = data.secure_code;\n\t\t\tconst verifyResults = {};\n\t\t\tdelete data.secure_code;\n\t\t\t// delete data.vnp_SecureHash;\n\n\t\t\tif (config.secureSecret.length > 0) {\n\t\t\t\tconst secureCode = [];\n\n\t\t\t\tObject.keys(data)\n\t\t\t\t\t.sort() // need to sort the key by alphabetically\n\t\t\t\t\t.forEach(key => {\n\t\t\t\t\t\tconst value = data[key];\n\n\t\t\t\t\t\tif (value.length > 0) {\n\t\t\t\t\t\t\tsecureCode.push(`${key}=${value}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\tconst isEqual =\n\t\t\t\t\ttoUpperCase(secureHash) === toUpperCase(hashHmac('SHA256', secureCode.join('&'), pack(config.secureSecret)));\n\n\t\t\t\tif (!isEqual) {\n\t\t\t\t\tverifyResults.isSuccess = false;\n\t\t\t\t\tverifyResults.message = 'Wrong checksum';\n\t\t\t\t} else if (data.error_text) {\n\t\t\t\t\tverifyResults.isSuccess = false;\n\t\t\t\t\tverifyResults.message = returnObject.errorMessage;\n\t\t\t\t} else {\n\t\t\t\t\tverifyResults.message = returnObject.responseMessage;\n\t\t\t\t\tverifyResults.isSuccess = returnObject.responseCode === '0';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresolve(Object.assign(returnObject, query, verifyResults));\n\t\t});\n\t}\n\n\t_mapQueryToObject(query) {\n\t\tconst returnObject = {\n\t\t\terrorMessage: query.error_text,\n\t\t\ttransactionId: query.order_code,\n\t\t\torderEmail: query.order_email,\n\t\t\torderSession: query.order_session,\n\t\t\tamount: query.price,\n\t\t\tresponseCode: query.response_code,\n\t\t\tresponseMessage: query.response_message,\n\t\t\tsiteCode: query.site_code,\n\t\t\ttransactionInfo: query.transaction_info,\n\t\t\tsecureCode: query.secure_code,\n\t\t};\n\n\t\treturn returnObject;\n\t}\n}\n\n/**\n * SohaPay configSchema\n * @type {SimpleSchema}\n */\nSohaPay.configSchema = new SimpleSchema({\n\tmerchantCode: { type: String },\n\tpaymentGateway: { type: String },\n\tsecureSecret: { type: String },\n});\n\n/**\n * @typedef {Object} SohaPayCheckoutPayload\n * @property {string} merchantCode\n * @property {string} paymentGateway\n * @property {string} secureSecret\n * @property {string} language  max: 16\n * @property {string} orderId  max: 34\n * @property {string} customerEmail  max: 24, regEx: SimpleSchema.RegEx.Email\n * @property {string} customerPhone  max: 15\n * @property {string} returnUrl  max: 255\n * @property {number} amount Integer, max: 9999999999\n * @property {string} paymentType  max: 1\n * @property {string} siteCode  max: 8\n * @property {string} transactionInfo  max: 255\n * @property {string} version  max: 1\n * @property {string} locale  optional: true, max: 2\n * @property {string} currency  optional: true, max: 4\n * @property {string} billingCity  optional: true, max: 64\n * @property {string} billingCountry  optional: true, max: 2\n * @property {string} billingPostCode  optional: true, max: 64\n * @property {string} billingStateProvince  optional: true, max: 64\n * @property {string} billingStreet  optional: true, max: 64\n * @property {string} deliveryAddress  optional: true, max: 255\n * @property {string} deliveryCity  optional: true, max: 255\n * @property {string} deliveryCountry  optional: true, max: 255\n * @property {string} deliveryProvince  optional: true, max: 255\n * @property {string} clientIp  optional: true, max: 15\n * @property {string} transactionId  optional: true, max: 40\n * @property {string} customerId  optional: true, max: 255\n */\n\n/* prettier-ignore */\n/**\n * SohaPay checkoutSchema\n * @type {SimpleSchema}\n */\nSohaPay.checkoutSchema = new SimpleSchema({\n\tlanguage\t\t\t\t: { type: String, max: 16 },\n\torderId\t\t\t\t\t: { type: String, max: 34 },\n\tcustomerEmail\t\t\t: { type: String, max: 24, regEx: SimpleSchema.RegEx.Email },\n\tcustomerPhone\t\t\t: { type: String, max: 15 },\n\treturnUrl\t\t\t\t: { type: String, max: 255 },\n\tamount\t\t\t\t\t: { type: SimpleSchema.Integer, max: 9999999999 },\n\tpaymentType\t\t\t\t: { type: String, max: 1 },\n\tsiteCode\t\t\t\t: { type: String, max: 8 },\n\ttransactionInfo\t\t\t: { type: String, max: 255 },\n\tversion\t\t\t\t\t: { type: String, max: 1 },\n\tlocale\t\t\t\t\t: { type: String, optional: true, max: 2 },\n\tcurrency\t\t\t\t: { type: String, optional: true, max: 4 },\n\tbillingCity\t\t\t\t: { type: String, optional: true, max: 64 },\n\tbillingCountry\t\t\t: { type: String, optional: true, max: 2 },\n\tbillingPostCode\t\t\t: { type: String, optional: true, max: 64 },\n\tbillingStateProvince\t: { type: String, optional: true, max: 64 },\n\tbillingStreet\t\t\t: { type: String, optional: true, max: 64 },\n\tdeliveryAddress      \t: { type: String, optional: true, max: 255 },\n\tdeliveryCity         \t: { type: String, optional: true, max: 255 },\n\tdeliveryCountry      \t: { type: String, optional: true, max: 255 },\n\tdeliveryProvince     \t: { type: String, optional: true, max: 255 },\n\tclientIp\t\t\t\t: { type: String, optional: true, max: 15 },\n\ttransactionId\t\t\t: { type: String, optional: true, max: 40 },\n\tcustomerId\t\t\t\t: { type: String, optional: true, max: 255 },\n});\n\nSohaPay.LOCALE_VN = 'vi';\nSohaPay.LOCALE_EN = 'en';\nSohaPay.VERSION = '2';\n\n/**\n * SohaPay test configs\n * <br>\n * _Cấu hình dùng thử SohaPay_\n */\nSohaPay.TEST_CONFIG = {\n\tmerchantCode: 'test',\n\tpaymentGateway: 'https://sohapay.vn/payment.php',\n\tsecureSecret: '1234567890',\n};\n\nexport { SohaPay };\n"]}